#!/usr/bin/env bash

# compress pdfs with ghostscript
case $(basename "$0") in 
    # render blender animations from $2 frame to $3 frame, taking a break for $4 seconds every 50 frames.
    blender_render)
        if [[ ! -f $1 ]]; then
            echo "FILE NOT FOUND!"
            exit 1
        fi
        
        if [[ -z $2 ]]; then
            blender -b $1 -f 1
            exit 1
        fi

        if [[ -z $3 ]]; then
            echo "----- Provide an end frame -----"
            exit 1
        fi

        if [[ -z $4 ]]; then
            echo "----- Provide break time in seconds -----"
            exit 1
        fi

        if [[ -z $5 ]]; then
            echo "----- Provide number of frames the break should be taken after -----"
            exit 1
        fi

        brk=0
        for frame in {$2..$3}
        do
            ((brk++))
            echo "----- $frame -----"
            blender -b $1 -f $frame


            if  ((brk%$5 == 0)); then
                echo "----- Taking a break -----"
                sleep $4
            fi
        done
    ;;

    # compress pdf
    compress_pdf)
        if [[ -z $1 ]]; then
            echo "enter input file"
            exit 1
        elif [[ -z $2 ]]; then
            echo "enter output file"
            exit 1
        fi
        gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/prepress -dNOPAUSE -dBATCH -sOutputFile=$2 $1
    ;;

    # compress image $1 (after replacing " " with "-")
    convert_to_webp)
        filename=$(basename -- $1 | sed 's/ /\-/g')
        filename="${filename%.*}" # remove extension at the end | abc.png -> abc

        echo "$1   ->   $filename.webp"
        cwebp -near_lossless 16 -mt -quiet $1 -o $filename.webp
    ;;

    # leetcode stuff
    cn)
        if [[ $1 == "cf" ]]
        then
            if [ -f ~/Developer/CP/codeforces/$2.cpp ];then
                subl ~/Develope/CP/codeforces/$2.cpp
            else
                touch ~/Developer/CP/codeforces/$2.cpp
                cp ~/Developer/CP/template.cpp ~/Developer/CP/codeforces/$2.cpp
                cd codeforces
                nvim $2.cpp
            fi
        fi

        if [[ $1 == "lc" ]]
        then
            if [ -f ~/Developer/CP/leetcode/$2.cpp ];then
                subl ~/Developer/CP/leetcode/$2.cpp
            else
                touch ~/Developer/CP/leetcode/$2.cpp
                cp ~/Developer/CP/template.cpp ~/Developer/CP/leetcode/$2.cpp
                cd leetcode
                nvim $2.cpp
            fi
        fi
        if [[ $1 == "at" ]]; then
            if [ -f ~/Developer/CP/atcoder/$2.cpp ]; then
                subl ~/Developer/CP/atcoder/$2.cpp
            else
                touch ~/Developer/CP/atcoder/$2.cpp
                cp ~/Developer/CP/template.cpp ~/Developer/CP/atcoder/$2.cpp
                cd atcoder
                nvim $2.cpp
            fi
        fi
    ;;

    # c run delete
    crd)
        zig cc -O2 -Wall a.c && ./a.out && rm -rf a.out
    ;;

    # git
    gacp)
        if [[ "$1" == "" ]]
        then
            echo "enter a message..."
            exit 1
        else
            git add .
            git commit -m "$1"
            git push
        fi
    ;;

    gcd)
        ans=""
        num_args=2
        if [[ $# == 0 ]] 
        then 
            echo "Atleast 2 numbers required, provided none."
            exit 1
        fi
        if [[ $# == $num_args ]]; then
            (([[ $1 == 0 ]] && echo $2) || ([[ $2 == 0 ]] && echo $1)) && exit 1

            ans=$(gcd $2 $(( $1 % $2 )))
        else
            ans=$1
            for i in {2..$#}
            do
                ans=$(gcd $ans $@[$i])
            done
        fi
        echo $ans
    ;;

    lcm)
        ans=$1
        shift
        for i in "$@"
        do
            ab=$(( $ans * $i ))
            ans=$(( $ab / $(gcd $ans $@[$i]) ))
        done
        echo $ans
    ;;

    mkcd)
        mkdir $1 && cd $1
    ;;

    opnssl_enc)
        openssl enc -aes-256-cbc -e -in $1 -out $2
    ;;

    opnssl_dec)
        openssl enc -aes-256-cbc -d -in $1 -out $2
    ;;

    print_colors)
        for i in {0..255}; do
            printf "\x1b[38;5;${i}mThe quick brown fox jumps over the lazy dog : ${i}\x1b[0m\n"
        done
    ;;

    remove_ds)
        find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch
    ;;
esac
